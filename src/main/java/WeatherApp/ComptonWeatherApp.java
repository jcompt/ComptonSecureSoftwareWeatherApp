//Jake Compton
//Assignment 1 - Weather App
//February 20, 2023

package WeatherApp;

import com.google.gson.*;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Scanner;


public class ComptonWeatherApp {

    public static void main(String[] args) {


        //Declare variables
        String userZip = "";
        Boolean dataIsGood = false;
        int digits = 0;

        if(args.length >0){
            userZip = args[0];
        }else{
            return;
        }

        //Check to make sure the user's input matches the format of a U.S. zip code
        if(userZip.length() == 5){
            //Do check for digits
            for(int i = 0; i < userZip.length(); i++){
                if(Character.isDigit(userZip.charAt(i))){
                    digits +=1;
                }

            } if(digits == 5){
                dataIsGood = true;
            }else{
                System.out.println("The input you entered is NOT in the format of a zip code!");
            }
        }else
            System.out.println("A zip code is 5 digits!");

        //Once the input has been verified, call the api to get the weather data
        if(dataIsGood) {
            try {
                StringBuilder apiURL = new StringBuilder();
                apiURL.append("http://api.weatherapi.com/v1/forecast.json?key=516f20f35a3b46948ec232043232501&q=" + userZip + "&days=3&aqi=no&alerts=no");

                //Declare URL variable to hold the URL to query the API
                URL weatherUrl = new URL(apiURL.toString());  // http://api.weatherapi.com/v1/current.json?key=516f20f35a3b46948ec232043232501&q=17701&aqi=no

                //Create connection to API
                HttpURLConnection connection = (HttpURLConnection) weatherUrl.openConnection();

                //Specify type of API request.  GET returns data from the server
                connection.setRequestMethod("GET");

                //Open connection to the API
                connection.connect();

                //Store the response code generated by the connection
                int responseCode = connection.getResponseCode();

                //Create StringBuilder to hold successful call information
                StringBuilder allTheData = new StringBuilder();

                Scanner scanner;

                //Check if the connection to the API is successful.  200 means success.  Any other code is an error.
                if (responseCode == 200) {
                    //The connection was successful.  Read the information from the API and save to variable
                    scanner = new Scanner(connection.getInputStream());
                } else if (responseCode == 400) {
                    scanner = new Scanner(connection.getErrorStream());
                } else {
                    throw new RuntimeException("The connection was NOT successful: " + responseCode);
                }

                while (scanner.hasNext()) {
                    allTheData.append(scanner.nextLine());
                }
                //Close the scanner when done reading
                scanner.close();

                //Convert the stringbuilder text to a JSON object that is formatted nicely
                Gson json = new GsonBuilder().setPrettyPrinting().create();
                JsonParser parseThis = new JsonParser();
                JsonObject root = parseThis.parse(allTheData.toString()).getAsJsonObject();

                //Check to make sure that the proper data was returned by using if else. The else will run all the code for good data
                if(root.has("error")){
                    System.out.println("Error: " + root.getAsJsonObject("error").get("message").getAsString());
                }else{
                    //Get the weather data out of the JSON data starting at the root object
                    JsonObject locationObj = root.getAsJsonObject("location");
                    JsonElement nameElement = locationObj.get("name");
                    JsonElement regionElement = locationObj.get("region");
                    JsonObject forecastObj = root.getAsJsonObject("forecast");
                    JsonArray forecastDayArr = forecastObj.getAsJsonArray("forecastday");

                    //Stringbuiler to display the weather information
                    StringBuilder weather = new StringBuilder();
                    weather.append("3 Day Weather Forecast for: " + nameElement.getAsString() + ", " + regionElement.getAsString());
                    weather.append("\n");

                    //Display first day's weather data
                    for (JsonElement forecastDay : forecastDayArr) {
                        //Make a temporary json object to convert the day element to an object
                        JsonObject tempForecastDay = forecastDay.getAsJsonObject();
                        weather.append("Date: " + tempForecastDay.get("date").getAsString());
                        JsonObject dayObj = tempForecastDay.getAsJsonObject("day");
                        weather.append("\n\t" + "Conditions:       " + dayObj.getAsJsonObject("condition").get("text").getAsString() + "\n");
                        weather.append("\t" + "High Temperature: " + dayObj.get("maxtemp_f").getAsString() + "\u00b0F \n");
                        weather.append("\t" + "Low Temperature:  " + dayObj.get("mintemp_f").getAsString() + "\u00b0F \n");
                        weather.append("\n");
                    }
                    System.out.println(weather);
                }

            } catch (MalformedURLException e) {
                throw new RuntimeException(e);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }
    }

}
